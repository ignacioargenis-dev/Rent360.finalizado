/**
 * Script de verificaci√≥n final del sistema de mensajer√≠a
 * despu√©s de las correcciones de Edge Runtime y matcher
 */

const fetch = require('node-fetch');

// Configuraci√≥n
const BASE_URL = process.env.BASE_URL || 'http://localhost:3000';

async function testMessagingSystem() {
  console.log('üß™ Verificando sistema de mensajer√≠a despu√©s de correcciones...\n');

  try {
    // Paso 1: Verificar que el servidor est√© funcionando
    console.log('1Ô∏è‚É£ Verificando servidor...');
    const healthResponse = await fetch(`${BASE_URL}/api/health`);
    if (!healthResponse.ok) {
      console.log('‚ùå Servidor no responde correctamente');
      return;
    }
    console.log('‚úÖ Servidor funcionando');

    // Paso 2: Intentar login con usuario de prueba
    console.log('\n2Ô∏è‚É£ Intentando login...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'owner@rent360.cl',
        password: 'owner123',
      }),
    });

    if (!loginResponse.ok) {
      console.log('‚ùå Login fall√≥:', loginResponse.status);
      const errorData = await loginResponse.json();
      console.log('Error:', errorData);
      return;
    }

    const loginData = await loginResponse.json();
    console.log('‚úÖ Login exitoso');

    // Paso 3: Extraer cookie de autenticaci√≥n
    const setCookieHeader = loginResponse.headers.get('set-cookie');
    const authTokenMatch = setCookieHeader?.match(/auth-token=([^;]+)/);
    if (!authTokenMatch) {
      console.log('‚ùå No se pudo extraer token de autenticaci√≥n');
      return;
    }

    const authToken = authTokenMatch[1];
    console.log('‚úÖ Token de autenticaci√≥n extra√≠do');

    // Paso 4: Probar endpoint de mensajes
    console.log('\n3Ô∏è‚É£ Probando endpoint de mensajes...');
    const messagesResponse = await fetch(`${BASE_URL}/api/messages`, {
      method: 'GET',
      headers: {
        Cookie: `auth-token=${authToken}`,
        'Content-Type': 'application/json',
      },
    });

    console.log(`üìä Respuesta: ${messagesResponse.status}`);

    if (messagesResponse.ok) {
      const messagesData = await messagesResponse.json();
      console.log('‚úÖ Sistema de mensajer√≠a funcionando correctamente!');
      console.log(`üì® Mensajes encontrados: ${messagesData.messages?.length || 0}`);

      // Paso 5: Probar env√≠o de mensaje
      console.log('\n4Ô∏è‚É£ Probando env√≠o de mensaje...');
      const sendResponse = await fetch(`${BASE_URL}/api/messages`, {
        method: 'POST',
        headers: {
          Cookie: `auth-token=${authToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          receiverId: loginData.user.id, // Enviar a s√≠ mismo para prueba
          subject: 'Mensaje de prueba',
          content:
            'Este es un mensaje de prueba para verificar que el sistema funciona correctamente.',
          type: 'direct',
        }),
      });

      if (sendResponse.ok) {
        console.log('‚úÖ Env√≠o de mensaje exitoso');
      } else {
        console.log('‚ö†Ô∏è Env√≠o de mensaje fall√≥:', sendResponse.status);
      }
    } else {
      const errorData = await messagesResponse.json();
      console.log('‚ùå Error en sistema de mensajer√≠a:', errorData);

      if (messagesResponse.status === 401) {
        console.log('\nüîç Diagn√≥stico de error 401:');
        console.log('- Verificar que JWT_SECRET est√© configurado en DigitalOcean');
        console.log('- Verificar que el middleware est√© capturando la ruta /api/messages');
        console.log('- Verificar que atob() funcione correctamente en Edge Runtime');
      }
    }

    console.log('\nüéØ Verificaci√≥n completada');
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n:', error.message);
  }
}

// Ejecutar verificaci√≥n
testMessagingSystem();
