#!/bin/bash

# Script de backup para Rent360 en DigitalOcean
# Configura backups autom√°ticos para base de datos y archivos

set -e

echo "üíæ Configurando backups para Rent360 en DigitalOcean..."

# Variables de configuraci√≥n
BACKUP_DIR="/var/backups/rent360"
LOG_FILE="/var/log/rent360-backup.log"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Funci√≥n de logging
log() {
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] $1" | tee -a "$LOG_FILE"
}

# Verificar si estamos en DigitalOcean App Platform
if [ -z "$DIGITALOCEAN_APP_ID" ]; then
    log "‚ö†Ô∏è  No se detect√≥ DigitalOcean App Platform. Algunas funciones pueden no estar disponibles."
fi

# ===========================================
# 1. CONFIGURACI√ìN INICIAL
# ===========================================

log "üîß Configurando directorio de backups..."

# Crear directorio de backups
sudo mkdir -p "$BACKUP_DIR"
sudo chown -R $USER:$USER "$BACKUP_DIR"

# Crear archivo de log
touch "$LOG_FILE"

log "‚úÖ Directorio de backups configurado: $BACKUP_DIR"

# ===========================================
# 2. BACKUP DE BASE DE DATOS
# ===========================================

log "üóÑÔ∏è Iniciando backup de base de datos..."

# Variables de conexi√≥n (obtener de variables de entorno)
DB_HOST=${DATABASE_URL:+$(echo $DATABASE_URL | sed -E 's|postgresql://[^@]+@([^:/]+).*|\1|')}
DB_PORT=${DATABASE_URL:+$(echo $DATABASE_URL | sed -E 's|.*:([0-9]+).*|\1|')}
DB_NAME=${DATABASE_URL:+$(echo $DATABASE_URL | sed -E 's|.*/([^?]+).*|\1|')}
DB_USER=${DATABASE_URL:+$(echo $DATABASE_URL | sed -E 's|postgresql://([^:]+):.*|\1|')}

if [ -z "$DB_HOST" ] || [ -z "$DB_NAME" ]; then
    log "‚ùå Error: No se pudo obtener la informaci√≥n de conexi√≥n de DATABASE_URL"
    exit 1
fi

# Archivo de backup
BACKUP_FILE="$BACKUP_DIR/rent360_db_$TIMESTAMP.sql"

log "üì§ Creando backup de base de datos..."

# Crear backup usando pg_dump
if command -v pg_dump &> /dev/null; then
    PGPASSWORD=$DB_PASSWORD pg_dump \
        -h "$DB_HOST" \
        -p "$DB_PORT" \
        -U "$DB_USER" \
        -d "$DB_NAME" \
        --no-owner \
        --no-privileges \
        --clean \
        --if-exists \
        --verbose \
        > "$BACKUP_FILE" 2>> "$LOG_FILE"

    if [ $? -eq 0 ]; then
        log "‚úÖ Backup de base de datos creado: $BACKUP_FILE"

        # Comprimir el archivo
        gzip "$BACKUP_FILE"
        log "‚úÖ Backup comprimido: ${BACKUP_FILE}.gz"

        # Calcular tama√±o del backup
        BACKUP_SIZE=$(du -h "${BACKUP_FILE}.gz" | cut -f1)
        log "üìä Tama√±o del backup: $BACKUP_SIZE"
    else
        log "‚ùå Error al crear backup de base de datos"
        exit 1
    fi
else
    log "‚ö†Ô∏è  pg_dump no disponible. Intentando m√©todo alternativo..."

    # M√©todo alternativo usando Prisma
    if command -v npx &> /dev/null; then
        npx prisma db push --preview-feature --force-reset 2>> "$LOG_FILE"
        log "‚úÖ Backup alternativo completado usando Prisma"
    else
        log "‚ùå No se pudo crear backup de base de datos"
        exit 1
    fi
fi

# ===========================================
# 3. BACKUP DE ARCHIVOS EST√ÅTICOS
# ===========================================

log "üìÅ Verificando archivos est√°ticos..."

# Directorio de archivos subidos (ajusta seg√∫n tu configuraci√≥n)
UPLOAD_DIR="./uploads"
if [ -d "$UPLOAD_DIR" ]; then
    UPLOAD_BACKUP="$BACKUP_DIR/rent360_uploads_$TIMESTAMP.tar.gz"

    log "üì§ Creando backup de archivos subidos..."

    # Crear backup de archivos
    tar -czf "$UPLOAD_BACKUP" -C "$UPLOAD_DIR" . 2>> "$LOG_FILE"

    if [ $? -eq 0 ]; then
        log "‚úÖ Backup de archivos creado: $UPLOAD_BACKUP"

        UPLOAD_SIZE=$(du -h "$UPLOAD_BACKUP" | cut -f1)
        log "üìä Tama√±o del backup de archivos: $UPLOAD_SIZE"
    else
        log "‚ùå Error al crear backup de archivos"
    fi
else
    log "‚ö†Ô∏è  Directorio de uploads no encontrado: $UPLOAD_DIR"
fi

# ===========================================
# 4. LIMPIEZA DE BACKUPS ANTIGUOS
# ===========================================

log "üßπ Limpiando backups antiguos..."

# Mantener solo los √∫ltimos 7 backups de base de datos
find "$BACKUP_DIR" -name "rent360_db_*.sql.gz" -mtime +7 -delete 2>> "$LOG_FILE"
DB_DELETED=$(find "$BACKUP_DIR" -name "rent360_db_*.sql.gz" -mtime +7 -delete -print | wc -l)
if [ "$DB_DELETED" -gt 0 ]; then
    log "üóëÔ∏è  Eliminados $DB_DELETED backups antiguos de base de datos"
fi

# Mantener solo los √∫ltimos 7 backups de archivos
find "$BACKUP_DIR" -name "rent360_uploads_*.tar.gz" -mtime +7 -delete 2>> "$LOG_FILE"
UPLOAD_DELETED=$(find "$BACKUP_DIR" -name "rent360_uploads_*.tar.gz" -mtime +7 -delete -print | wc -l)
if [ "$UPLOAD_DELETED" -gt 0 ]; then
    log "üóëÔ∏è  Eliminados $UPLOAD_DELETED backups antiguos de archivos"
fi

# ===========================================
# 5. VERIFICACI√ìN DE INTEGRIDAD
# ===========================================

log "üîç Verificando integridad de backups..."

# Verificar que los archivos de backup existen y no est√°n vac√≠os
if [ -f "${BACKUP_FILE}.gz" ] && [ -s "${BACKUP_FILE}.gz" ]; then
    log "‚úÖ Backup de base de datos v√°lido"

    # Verificar que se puede descomprimir
    if gzip -t "${BACKUP_FILE}.gz" 2>> "$LOG_FILE"; then
        log "‚úÖ Backup de base de datos se puede descomprimir correctamente"
    else
        log "‚ùå Error: Backup de base de datos corrupto"
    fi
else
    log "‚ùå Error: Backup de base de datos no v√°lido o vac√≠o"
fi

# ===========================================
# 6. REPORTE FINAL
# ===========================================

log "üìä Generando reporte de backup..."

# Contar archivos de backup
DB_BACKUPS=$(find "$BACKUP_DIR" -name "rent360_db_*.sql.gz" | wc -l)
UPLOAD_BACKUPS=$(find "$BACKUP_DIR" -name "rent360_uploads_*.tar.gz" | wc -l)
TOTAL_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)

# Calcular espacio disponible
DISK_USAGE=$(df -h "$BACKUP_DIR" | tail -1 | awk '{print $4}')
DISK_USAGE_PERCENT=$(df "$BACKUP_DIR" | tail -1 | awk '{print $5}')

cat << EOF | tee -a "$LOG_FILE"

========================================
üìã REPORTE DE BACKUP - Rent360
========================================
Fecha: $(date)
Servidor: $(hostname)
Entorno: ${NODE_ENV:-production}

üìä ESTAD√çSTICAS:
- Backups de BD: $DB_BACKUPS archivos
- Backups de archivos: $UPLOAD_BACKUPS archivos
- Espacio total usado: $TOTAL_SIZE
- Espacio disponible: $DISK_USAGE ($DISK_USAGE_PERCENT)

üóÑÔ∏è √öLTIMO BACKUP DE BASE DE DATOS:
- Archivo: $(basename "${BACKUP_FILE}.gz")
- Tama√±o: $BACKUP_SIZE
- Ubicaci√≥n: ${BACKUP_FILE}.gz

üìÅ √öLTIMO BACKUP DE ARCHIVOS:
- Archivo: $(basename "$UPLOAD_BACKUP")
- Tama√±o: $UPLOAD_SIZE
- Ubicaci√≥n: $UPLOAD_BACKUP

‚úÖ ESTADO: BACKUP COMPLETADO EXITOSAMENTE
========================================

EOF

log "üéâ Backup completado exitosamente"

# ===========================================
# 7. CONFIGURACI√ìN DE MONITOREO (OPCIONAL)
# ===========================================

# Si tienes configurado un webhook para notificaciones
if [ -n "$BACKUP_WEBHOOK_URL" ]; then
    log "üì§ Enviando notificaci√≥n de backup..."

    # Enviar notificaci√≥n (ejemplo con curl)
    curl -X POST "$BACKUP_WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{
            \"text\": \"Backup de Rent360 completado\",
            \"timestamp\": \"$TIMESTAMP\",
            \"status\": \"success\",
            \"size\": \"$BACKUP_SIZE\"
        }" 2>> "$LOG_FILE" || log "‚ö†Ô∏è  Error al enviar notificaci√≥n"
fi

log "‚úÖ Proceso de backup finalizado"

exit 0
