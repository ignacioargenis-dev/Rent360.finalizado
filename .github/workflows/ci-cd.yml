name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  DATABASE_URL: "file:./test.db"

jobs:
  # ===== JOB 1: VALIDACI√ìN DE C√ìDIGO =====
  code-validation:
    name: 'Code Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run type-check

      - name: ESLint code quality
        run: npm run lint

      - name: Code analysis
        run: npm run code-analysis

  # ===== JOB 2: TESTS UNITARIOS =====
  unit-tests:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-validation

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rent360_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push
          npm run db:seed

      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/rent360_test"

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/unit/

  # ===== JOB 3: TESTS DE INTEGRACI√ìN =====
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rent360_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push

      - name: Run integration tests
        run: npm run test:integration -- --watchAll=false
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/rent360_integration_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/integration/

  # ===== JOB 4: TESTS E2E =====
  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: integration-tests

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rent360_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push
          npm run db:seed

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/rent360_e2e_test"

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e -- --project=chromium
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/e2e/
            playwright-report/

  # ===== JOB 5: TESTS DE SEGURIDAD =====
  security-tests:
    name: 'Security Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security -- --watchAll=false

      - name: Security audit
        run: npm audit --audit-level high

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: test-results/security/

  # ===== JOB 6: AN√ÅLISIS DE COBERTURA =====
  coverage-analysis:
    name: 'Coverage Analysis'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results
          path: coverage/unit/

      - name: Generate comprehensive coverage report
        run: npm run test:comprehensive

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Coverage threshold check
        run: |
          COVERAGE=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
          if (( $(echo "$COVERAGE < 75" | bc -l) )); then
            echo "‚ùå Coverage too low: ${COVERAGE}% (required: 75%)"
            exit 1
          else
            echo "‚úÖ Coverage acceptable: ${COVERAGE}%"
          fi

  # ===== JOB 7: DEPLOYMENT (Solo en main) =====
  deploy:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, coverage-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

      - name: Deploy to production
        run: |
          # Aqu√≠ ir√≠a el comando de deployment
          echo "üöÄ Deploying to production..."
          # Ejemplo: rsync, docker push, serverless deploy, etc.

  # ===== JOB 8: NOTIFICACIONES =====
  notifications:
    name: 'Send Notifications'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests]
    if: always()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${{ job.status }}'.toUpperCase()}: ${{ github.workflow }} workflow`,
                fields: [
                  {
                    title: 'Repository',
                    value: '${{ github.repository }}',
                    short: true
                  },
                  {
                    title: 'Branch',
                    value: '${{ github.ref_name }}',
                    short: true
                  },
                  {
                    title: 'Commit',
                    value: '${{ github.sha }}',
                    short: true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# ===== CONFIGURACI√ìN DE PROTECCI√ìN DE BRANCHES =====
# En GitHub Settings > Branches > main > Branch protection rules:
# - Require status checks to pass
# - Require branches to be up to date before merging
# - Status checks: unit-tests, integration-tests, e2e-tests, security-tests, coverage-analysis
# - Require at least 1 approval for pull requests
# - Restrict pushes that create matching branches
