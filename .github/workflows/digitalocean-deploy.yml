name: DigitalOcean App Platform Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'

jobs:
  # ===== DEPLOYMENT JOB =====
  deploy-to-digitalocean:
    name: 'Deploy to DigitalOcean'
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run type-check

      - name: ESLint code quality
        run: npm run lint

      - name: Build application for production
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Install DigitalOcean CLI
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
          doctl version

      - name: Authenticate with DigitalOcean
        run: doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create DigitalOcean App deployment
        run: |
          echo "üöÄ Starting deployment to DigitalOcean App Platform..."
          doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait --format json

      - name: Verify deployment status
        run: |
          echo "üìä Checking deployment status..."
          doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format json | jq '.phase'

      - name: Health check
        run: |
          echo "üîç Performing health check..."
          APP_URL=$(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format json | jq -r '.default_ingress')
          echo "App URL: $APP_URL"

          # Wait for app to be ready
          timeout 300 bash -c "until curl -f $APP_URL/api/health; do sleep 10; done" || echo "Health check failed"

      - name: Run post-deployment database migrations (if needed)
        run: |
          echo "üóÑÔ∏è Running post-deployment tasks..."
          # Add any post-deployment scripts here if needed
          echo "Post-deployment tasks completed"

  # ===== NOTIFICATION JOB =====
  notify-deployment:
    name: 'Notify Deployment'
    runs-on: ubuntu-latest
    needs: deploy-to-digitalocean
    if: always()

    steps:
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "attachments": [{
                "color": "${{ job.status }}" === "success" ? "good" : "${{ job.status }}" === "failure" ? "danger" : "warning",
                "text": "${{ job.status }}" === "success" ? "‚úÖ Rent360 deployed successfully to DigitalOcean" : "‚ùå Rent360 deployment failed",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "production",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Triggered by",
                    "value": "${{ github.actor }}",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "View Deployment",
                    "url": "https://cloud.digitalocean.com/apps/${{ secrets.DIGITALOCEAN_APP_ID }}"
                  },
                  {
                    "type": "button",
                    "text": "View Logs",
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# ===== CONFIGURACI√ìN DE CONCURRENCIA =====
concurrency:
  group: digitalocean-deployment-${{ github.ref }}
  cancel-in-progress: true
