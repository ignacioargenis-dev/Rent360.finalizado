/**
 * Script para probar el middleware en producci√≥n
 */

const fetch = require('node-fetch');

const BASE_URL = 'https://rent360management-2yxgz.ondigitalocean.app';

async function testMiddleware() {
  console.log('üß™ Probando middleware en producci√≥n...\n');

  try {
    // 1. Probar ruta p√∫blica (deber√≠a funcionar sin autenticaci√≥n)
    console.log('1Ô∏è‚É£ Probando ruta p√∫blica /api/health...');
    const healthResponse = await fetch(`${BASE_URL}/api/health`);
    console.log(`‚úÖ Health: ${healthResponse.status}`);

    // 2. Probar ruta de login (deber√≠a funcionar sin autenticaci√≥n)
    console.log('\n2Ô∏è‚É£ Probando login...');
    const loginResponse = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'owner@rent360.cl',
        password: 'owner123',
      }),
    });

    if (!loginResponse.ok) {
      console.log(`‚ùå Login fall√≥: ${loginResponse.status}`);
      return;
    }

    const loginData = await loginResponse.json();
    console.log('‚úÖ Login exitoso');

    // Extraer token
    const cookies = loginResponse.headers.get('set-cookie');
    const authTokenMatch = cookies?.match(/auth-token=([^;]+)/);
    if (!authTokenMatch) {
      console.log('‚ùå No se encontr√≥ token de autenticaci√≥n');
      return;
    }

    const authToken = authTokenMatch[1];
    console.log('‚úÖ Token extra√≠do');

    // 3. Probar endpoint protegido
    console.log('\n3Ô∏è‚É£ Probando endpoint protegido /api/messages...');
    const messagesResponse = await fetch(`${BASE_URL}/api/messages`, {
      headers: {
        Cookie: `auth-token=${authToken}`,
        'Content-Type': 'application/json',
      },
    });

    console.log(`üìä Messages status: ${messagesResponse.status}`);

    if (messagesResponse.ok) {
      const data = await messagesResponse.json();
      console.log('‚úÖ Mensajes funcionando correctamente!');
      console.log(`üì® Total mensajes: ${data.messages?.length || 0}`);
    } else {
      const errorData = await messagesResponse.json();
      console.log('‚ùå Error en mensajes:', errorData);
    }

    // 4. Probar endpoint /api/auth/me (deber√≠a funcionar)
    console.log('\n4Ô∏è‚É£ Probando /api/auth/me...');
    const meResponse = await fetch(`${BASE_URL}/api/auth/me`, {
      headers: {
        Cookie: `auth-token=${authToken}`,
        'Content-Type': 'application/json',
      },
    });

    console.log(`üìä Auth/me status: ${meResponse.status}`);

    if (meResponse.ok) {
      const meData = await meResponse.json();
      console.log('‚úÖ Auth/me funcionando:', meData.user?.email);
    } else {
      console.log('‚ùå Error en auth/me');
    }
  } catch (error) {
    console.error('‚ùå Error en prueba:', error.message);
  }
}

testMiddleware();
